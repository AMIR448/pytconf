- make it easier to use pytconf.
	- Enable not to define groups of commands.
	- Enable not to mark the main function.
	- Enable not to pass anything to the @register functions
	in which case they will require (all or no?) configs.
	- Enable to overwrite the name of the function by passing a parameters to @register.
- currently we lie to type checkers. How?
	The method 'create_str' of the class ParamCreator does not really
	return a string but rather a ParamFunctions object.
	We decorate the types of that method to say that it returns a string
	but really it does not.
	Why is this bad? because some type checkers can see through our lies.
	Can we stop lying?
	YES! We can override the __eq__ method of classes!
	This way the method will actually return what it's supposed to return
	but will also register the parameters just like our current Config.
	This will be much cleaner.
- add a "reset" method to the 'Config' object and a general method
	of pytconf which is 'reset_all'.
	This will enable to reset all objects to their default behaviour.
	This will be good for web servers and for setting up repeatable tests.
- once myenv supports more than one virtual env have this project
	have:
		- virtual env for 2.7 running.
		- virtual env for 3.6 running.
		- virtual env for development tools (pypitools etc).
- make each parameters have a suggester class attached. This will suggest
	values to a user that needs to put this parameter in.
- make each parameter have a gui attached to be filled by gui.
	this means that I could run an app that needs parameters and just fill
	then out using tui.
- have each class of configuration remember recent values users used to fill
	them out. The we can use them for:
	- auto filling the boxes in the tui for running the code.
	- showing them in the --help to remind people of latest values.
	- reminding people of latest values.
		app --filename @show_recent
	Things to think about:
	- how can we share recent values between parameters?
	For instance: I want recent files to be shared between:
		ConfigInput.filename
	and:
		ConfigOutput.filename
	how do we achieve that?
- make sure that we can easily create a app based on pytconf without much
	fanfare (groups, main etc).
